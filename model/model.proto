syntax = "proto3";

package model;

// Common

message CompletionResult {
    bool successful = 1;
    Datum datum = 2;
}

message BlobDatum {
    bytes data_string = 1;
    string content_type = 2;
}

message HttpHeader {
    string key = 1;
    string value = 2;
}
enum HttpMethod {
    unknown_method = 0;
    get = 1;
    head = 2;
    post = 3;
    put = 4;
    delete = 5;
    options = 7;
    patch = 6;
}

message HttpReqDatum {
    BlobDatum body = 1;
    repeated HttpHeader headers = 3;
    HttpMethod method = 4;
}

message HttpRespDatum {
    BlobDatum body = 1;
    repeated HttpHeader headers = 3;
    uint32 status_code = 4;
}

enum ErrorDatumType {
    unknown_error = 0;
    stage_timeout = 1;
    stage_failed = 2;
    function_timeout = 3;
    function_invoke_failed = 4;
    stage_lost = 5;
    invalid_stage_response =6;
}


message EmptyDatum {

}

message StageRefDatum {
    string stage_ref = 1;
}
message ErrorDatum {
    ErrorDatumType type = 1;
    string message = 2;
}

message Datum {
    oneof val {
        EmptyDatum empty = 1;
        BlobDatum blob = 2;
        ErrorDatum error = 3;
        StageRefDatum stage_ref = 4;
        HttpReqDatum http_req = 5;
        HttpRespDatum http_resp = 6;
    }
}

enum CompletionOperation {
    unknown_operation = 0;
    acceptEither = 1;
    applyToEither = 2;
    thenAcceptBoth = 3;
    thenApply = 4;
    thenRun = 5;
    thenAccept = 6;
    thenCompose = 7;
    thenCombine = 8;
    whenComplete = 9;
    handle = 10;
    supply = 11;
    invokeFunction = 12;
    completedValue = 13;
    delay = 14;
    allOf = 15;
    anyOf = 16;
    externalCompletion = 17;
    exceptionally = 18;
}

// Commands
message AddChainedStageRequest {
    string graph_id = 1;
    CompletionOperation operation = 2;
    BlobDatum closure = 3;
    repeated string deps = 4;
}

message AddCompletedValueStageRequest {
    string graph_id = 1;
    CompletionResult result = 2;
}


message AddDelayStageRequest {
    string graph_id = 1;
    uint64 delay_ms = 2;
}

message AddExternalCompletionStageRequest {
    string graph_id = 1;
}


message AddInvokeFunctionStageRequest {
    string graph_id = 1;
    string function_id = 2;
    HttpReqDatum arg = 3;
}


message AddStageResponse {
    string graph_id = 1;
    string stage_id = 2;
}

message CompleteDelayStageRequest {
    string graph_id = 1;
    string stage_id = 2;
    CompletionResult result = 3;
}


message CompleteStageExternallyResponse {
    string graph_id = 1;
    string stage_id = 2;
    bool successful = 3;
}

message CreateGraphRequest {
    string function_id = 1;
    string graph_id = 2;
}

message CreateGraphResponse {
    string graph_id = 1;
}

message FaasInvocationResponse {
    string graph_id = 1;
    string stage_id = 2;
    string function_id = 3;
    CompletionResult result = 4;
}

message GetGraphStateRequest {
    string graph_id = 1;
}

message GetGraphStateResponse {
    message StageRepresentation {
        string type = 1;
        string status = 2;
        repeated uint32 dependencies = 3;
    }
    map<uint32, StageRepresentation> stages = 1;
    string function_id = 2;
    string graph_id = 3;
}

message ListGraphsRequest {
    ListGraphsFilter filter = 1;
}

enum ListGraphsFilter {
    unknown = 0;
    all = 1;
    running = 2;
    completed = 3;
}

message ListGraphResponse {
    string graph_id = 1;
}

message ListGraphsResponse {
    repeated ListGraphResponse graphs = 1;
}

message GetStageResultRequest {
    string graph_id = 1;
    string stage_id = 2;
}

message GetStageResultResponse {
    string graph_id = 1;
    string stage_id = 2;
    CompletionResult result = 3;
}

message InvalidGraphOperation {
    string graph_id = 1;
    string error = 2;
}

message InvalidStageOperation {
    string graph_id = 1;
    string error = 2;
    string stage_id = 3;
}

// Invoke commands
message InvokeFunctionRequest {
    string graph_id = 1;
    string stage_id = 2;
    string function_id = 3;
    HttpReqDatum arg = 4;
}

message InvokeStageRequest {
    string graph_id = 1;
    string stage_id = 2;
    string function_id = 3;
    CompletionOperation operation = 4;
    repeated Datum args = 5;
    BlobDatum closure = 6;
    bool exceptional = 7;
}

message AddGraphEntity {
    string graph_entity = 1;
}

// Events

message DelayScheduledEvent {
    string stage_id = 1;
    uint64 delayed_ts = 2;
}

message GraphCreatedEvent {
    string graph_id = 1;
    string function_id = 2;
}

message GraphCompletedEvent {
    string graph_id = 1;
    string function_id = 2;
}

message GraphCommittedEvent {
    string graph_id = 1;
}

message StageAddedEvent {
    string stage_id = 1;
    CompletionOperation op = 2;
    BlobDatum closure = 3;
    repeated string dependencies = 4;
}

message StageCompletedEvent {
    string stage_id = 1;
    CompletionResult result = 2;
}

message StageComposedEvent {
    string stage_id = 1;
    string composed_stage_id = 2;
}